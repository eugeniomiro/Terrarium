<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Game</name>
    </assembly>
    <members>
        <member name="T:Terrarium.Game.AnimalSpecies">
            <summary>
             Holds all species information about an animal.  See Species for more information
            </summary>
        </member>
        <member name="M:Terrarium.Game.AnimalSpecies.#ctor(System.Type)">
            <summary>
             Creates a new Animal species from a CLR Type object.  Initializes
             the new species properties based on various attributes on the Type.
            </summary>
            <param name="clrType">The type for the organism class.</param>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.ReproductionWait">
            <summary>
             The amount of time the creature must wait before they
             can reproduce
            </summary>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.LifeSpan">
            <summary>
             Returns the total number of game ticks the creature can live before
             dying of old age.
            </summary>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.IsCarnivore">
            <returns>
             True if the animal is a carnivore, otherwise false.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.EatingSpeedPerUnitRadius">
            <returns>
             The speed that the animal can eat.  This is multiplied by the
             radius of the creature to get the real eating speed.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.SkinFamily">
            <returns>
             The skin family for the organism.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.MaximumAttackDamagePerUnitRadius">
            <returns>
             The maximum damage the species can inflict per unit of its radius.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.MaximumDefendDamagePerUnitRadius">
            <returns>
             The maximum damage the species can defend against per unit of its radius.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.MaximumSpeed">
            <returns>
             The maximum speed the species can attain.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.InvisibleOdds">
            <returns>
            The odds that the species is invisible to a call to Animal.Scan() by another species.
            </returns>
        </member>
        <member name="P:Terrarium.Game.AnimalSpecies.EyesightRadius">
            <returns>
            The distance animal can see.
            </returns>
        </member>
        <member name="M:Terrarium.Game.AnimalSpecies.GetAttributeWarnings">
            <summary>
             Generates warnings for attributes that have wasted points.
            </summary>
            <returns>Message about wasted points, or empty if there aren't any messages.</returns>
        </member>
        <member name="M:Terrarium.Game.AnimalSpecies.InitializeNewState(System.Drawing.Point,System.Int32)">
            <summary>
             Initializes a new state given a position and a generation.  This is
             used when creatures give birth, and the state has to effectively
             be cloned.
            </summary>
            <param name="position">The new position of the creature in the world.</param>
            <param name="generation">The family generation for this creature.</param>
            <returns>A new state to represent the creature.</returns>
        </member>
        <member name="T:Terrarium.Game.AnimalWorldBoundary">
            <summary>
            This class implements the IAnimalWorldBoundary which is used by a creature
            to get information about the surrounding area. It is the interface between 
            the animal and the world. This class is passed from the game engine to the 
            actual creature, but we don't want them to have access to all the members.
            So, we implement an interface that is defined in the OrganismBase assembly, 
            and implement the class in the TerrariumEngine assembly. Since the 
            TerrariumEngine assembly doesn't have the AllowPartiallyTrustedCallers
            attribute animals won't be able to call the class directly and will only 
            be able to call the members of the interface.
            </summary>
        </member>
        <member name="M:Terrarium.Game.AnimalWorldBoundary.#ctor(OrganismBase.Organism,System.String)">
            <summary>
             Creates a new animal world boundary for a given animal
            </summary>
            <param name="animal">The actual class representing the creature.</param>
            <param name="ID">The unique ID of the creature.</param>
        </member>
        <member name="P:Terrarium.Game.AnimalWorldBoundary.CurrentAnimalState">
            <summary>
             While immutable animal properties are stored directly on the creature
             class, any game engine properties are stored on the state objects.
             Creatures can get access to their state object through the CurrentAnimalState
             property.
            </summary>
        </member>
        <member name="M:Terrarium.Game.AnimalWorldBoundary.Scan">
            <summary>
             <para>
              Scans the world in a circle around your animal's current location and returns a list of what was seen.
              The radius of the circle your animal looks in is determined by the number of points you applied to the
              EyesightPoints attribute.
             </para>
             <para>
              Animals can be hidden by camouflage so subsequent calls to this method may return different sets of objects
              even if the world hasn't changed at all.
             </para>
             <para>
              You can hold onto references to the OrganismState objects that are returned by this method indefinitely.
              However, they will reflect the organisms state at the point where you saw the animal -- they are not refreshed
              to reflect an organisms state over time.  Use the LookFor() method to get an up-to-date OrganismState
              object.
             </para>
            </summary>
            <returns>Returns an ArrayList of OrganismState objects. One for each plant or animal that was seen.</returns>
        </member>
        <member name="M:Terrarium.Game.AnimalWorldBoundary.LookFor(OrganismBase.OrganismState)">
            <summary>
             Refreshes an organism state to the latest available state.  Organism
             state objects can be held by an organism for many ticks, and they don't
             automatically update themselves.  The reference held is immutable and so
             only represents the creature's state at the time the Scan was made and
             not necessarily the latest state.
            </summary>
            <param name="organismState">The organism state that needs to be updated</param>
            <returns>An updated state if the creature is still visible and alive, else null</returns>
        </member>
        <member name="M:Terrarium.Game.AnimalWorldBoundary.LookForNoCamouflage(OrganismBase.OrganismState)">
            <summary>
             Provides the same features as LookFor, except does not take camouflage
             into account.
            </summary>
            <param name="organismState">The organism state that needs to be updated.</param>
            <returns>An updated state if the creature is still alive and within range, null otherwise.</returns>
            <internal/>
        </member>
        <member name="M:Terrarium.Game.AnimalWorldBoundary.RefreshState(System.String)">
            <summary>
             Refresh's a state based on ID rather than a stored state object.
             This can be used to optimize the amount of memory required for
             storing creature information during serialization.
            </summary>
            <param name="organismID">The Unique ID of the organism.</param>
            <returns>The state object for the creature if visible to LookFor, null otherwise.</returns>
        </member>
        <member name="T:Terrarium.Game.KilledOrganism">
            <summary>
             Represents an organism that has been killed and will soon be removed
             from the Terrarium game world.
            </summary>
        </member>
        <member name="M:Terrarium.Game.KilledOrganism.#ctor(System.String,OrganismBase.PopulationChangeReason,System.String)">
            <summary>
             Creates a new KilledOrganism based on the ID, the reason for death, and
             any extra information that can be used when the organism is removed.
            </summary>
            <param name="id">The Unique ID of the organism.</param>
            <param name="reason">The reason the organism was killed.</param>
            <param name="extraInformation">Extra information about the death.</param>
        </member>
        <member name="M:Terrarium.Game.KilledOrganism.#ctor(System.String,OrganismBase.PopulationChangeReason)">
            <summary>
             Creates a new KilledOrganism based on ID and reason for death.
            </summary>
            <param name="id">The Unique ID of the organism.</param>
            <param name="reason">The reason the organism was killed.</param>
        </member>
        <member name="M:Terrarium.Game.KilledOrganism.#ctor(OrganismBase.OrganismState)">
            <summary>
             Creates a new KilledOrganism based on information in an OrganismState.
            </summary>
            <param name="state">The state object that ID and death reason will be pulled from.</param>
        </member>
        <member name="P:Terrarium.Game.KilledOrganism.ID">
            <summary>
             Retrieves the ID of the killed organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.KilledOrganism.ExtraInformation">
            <summary>
             Retrieves textual information about the death of the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.KilledOrganism.DeathReason">
            <summary>
             Retrieves the reason this organism was killed.
            </summary>
        </member>
        <member name="T:Terrarium.Game.NewOrganism">
            <summary>
             Contains the information needed to intialize a new organism within the Terrarium.
            </summary>
        </member>
        <member name="F:Terrarium.Game.NewOrganism._dna">
            <summary>
             The DNA of the new creature if it was born.
            </summary>
        </member>
        <member name="F:Terrarium.Game.NewOrganism._state">
            <summary>
             The state of the new creature.  This is pre-created and pre-located.
            </summary>
        </member>
        <member name="F:Terrarium.Game.NewOrganism._addAtRandomLocation">
            <summary>
             This determines if the creature should be added at a random location.
            </summary>
        </member>
        <member name="M:Terrarium.Game.NewOrganism.#ctor(OrganismBase.OrganismState,System.Byte[])">
            <summary>
             Creates a NewOrganism object intialized with the creature's state, some
             DNA information if available.  The state object must be immutable for
             this to succeed.
            </summary>
            <param name="state">The state of the organism to be added.</param>
            <param name="dna">The DNA the creature gets initialized with.</param>
        </member>
        <member name="P:Terrarium.Game.NewOrganism.State">
            <summary>
             Provides access to the state object of the new organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.NewOrganism.AddAtRandomLocation">
            <summary>
             Determines if the creature should be added at a random location
             or the location available in their organism state.
            </summary>
        </member>
        <member name="P:Terrarium.Game.NewOrganism.Dna">
            <summary>
             Provides access to the byte array that represents the DNA that
             will be passed to the creature.  A clone is made because array
             references are not read-only, and can be modified at the member
             level.
            </summary>
        </member>
        <member name="T:Terrarium.Game.OrganismWorldBoundary">
            <summary>
             Represents an organisms world view.  Implements the IOrganismWorldBoundary
             interface which is available to creatures that link to the OrganismBase
             library.  See description of AnimalWorldBoundary to see how this hides information
             from creatures.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismWorldBoundary.#ctor(OrganismBase.Organism,System.String)">
            <summary>
             Initializes a new world boundary given the original organism and their ID.
            </summary>
            <param name="organism">The organism used to init this world boundary.</param>
            <param name="ID">The Unique ID of the organism.</param>
        </member>
        <member name="P:Terrarium.Game.OrganismWorldBoundary.Organism">
            <summary>
             The original organism this world boundary was created for.
            </summary>
        </member>
        <member name="P:Terrarium.Game.OrganismWorldBoundary.CurrentOrganismState">
            <summary>
             Returns an AnimalState that represents your current state in the world.
            </summary>
        </member>
        <member name="P:Terrarium.Game.OrganismWorldBoundary.ID">
            <summary>
             Returns the organism's ID.
            </summary>
        </member>
        <member name="P:Terrarium.Game.OrganismWorldBoundary.WorldWidth">
            <summary>
             Returns the width of the world in game units (pixels).
            </summary>
        </member>
        <member name="P:Terrarium.Game.OrganismWorldBoundary.WorldHeight">
            <summary>
             Returns the width of the world in game units (pixels).
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismWorldBoundary.SetOrganismID(System.String)">
            <summary>
             Sets the Unique ID of the creature in the system.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismWorldBoundary.SetWorldBoundary(OrganismBase.Organism,System.String)">
            <summary>
             Sets the world boundary for a specific creature.
            </summary>
            <param name="organism">The organism the boundary is for.</param>
            <param name="id">The Unique ID of the organism.</param>
        </member>
        <member name="T:Terrarium.Game.PlantSpecies">
            <summary>
            Holds all species information about a plant.  See Species for more information.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PlantSpecies.#ctor(System.Type)">
            <summary>
             Creates a new species object from a CLR Type by
             pulling information off of the type's attributes.
            </summary>
            <param name="clrType">The Type representing the Plant class.</param>
        </member>
        <member name="P:Terrarium.Game.PlantSpecies.SeedSpreadDistance">
            <summary>
            The maximum distance that seeds can go from the parent plant when reproducing.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PlantSpecies.SkinFamily">
            <summary>
            The skin family for the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PlantSpecies.LifeSpan">
            <summary>
            See Species.LifeSpan for information about this member.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PlantSpecies.ReproductionWait">
            <summary>
            See Species.ReproductionWait for information about this member.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PlantSpecies.GetAttributeWarnings">
            <summary>
             Retrieves attribute warnings.  The Plant class implements no warnings
             and so delegates to the base class for warnings.
            </summary>
            <returns>A message with available attribute warnings.</returns>
        </member>
        <member name="M:Terrarium.Game.PlantSpecies.InitializeNewState(System.Drawing.Point,System.Int32)">
            <summary>
             Initializes a new state object with the given position and family generation
            </summary>
            <param name="position">The position of the new PlantState</param>
            <param name="generation">The family generation of the new Plant</param>
            <returns>A state object initialized to the given position and generation.</returns>
        </member>
        <member name="T:Terrarium.Game.PlantWorldBoundary">
            <summary>
             Represents a world boundary for a plant. See description of AnimalWorldBoundary to see how this hides information
             from creatures.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PlantWorldBoundary.#ctor(OrganismBase.Organism,System.String)">
            <summary>
             Creates a new plant world boundary given the owning
             plant and the plant's unique ID.
            </summary>
            <param name="plant">The plant used to initialize the world boundary.</param>
            <param name="id">The plant's Unique ID</param>
        </member>
        <member name="P:Terrarium.Game.PlantWorldBoundary.CurrentPlantState">
            <summary>
             Returns a state object representing the plant's current state in the world.
            </summary>
        </member>
        <member name="T:Terrarium.Game.Species">
            <summary>
             Base class for animal and plant species.  These
             objects contains all the information about the characteristics
             and abilities of a given species.
            </summary>
            <threadsafe/>
        </member>
        <member name="F:Terrarium.Game.Species._assemblyFullName">
            <summary>
             The full assembly name of the containing assembly for the typeName
            </summary>
        </member>
        <member name="F:Terrarium.Game.Species._maximumEnergyPerUnitRadius">
            <summary>
             The maximum amount of energey this species can attain.
            </summary>
        </member>
        <member name="F:Terrarium.Game.Species._typeName">
            <summary>
             The name of the CLR Type that represents this creature.
            </summary>
        </member>
        <member name="F:Terrarium.Game.Species._speciesType">
            <summary>
             Cached Type object used to quickly compare species together.
             This class is serialized, but this member is left out since
             when the object is deserialized sometimes the assembly doesn't exist.
            </summary>
        </member>
        <member name="M:Terrarium.Game.Species.#ctor(System.Type)">
            <summary>
             Creates a new instance of the species class initialized with
             the given CLR Type pulling various fields out of the Type's
             attributes.
            </summary>
            <param name="clrType">The CLR Type to initialize this species.</param>
        </member>
        <member name="P:Terrarium.Game.Species.Type">
            <summary>
             Return the type for this species.  Normally this value
             is cached and very quick to return, otherwise the value
             has to be looked up using the assembly resolver handlers.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.AuthorName">
            <summary>
            Returns the author's name
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.AuthorEmail">
            <summary>
            Returns the author's email
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.MarkingColor">
            <summary>
            The custom coloring for the organism
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.InitialRadius">
            <summary>
            The initial Radius of the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.Name">
            <summary>
            The name of the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.AssemblyInfo">
            <summary>
             Retrieves assembly information about the current organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.MatureRadius">
            <summary>
             The size of the organism when mature.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.Skin">
            <summary>
            The custom skin name for the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.ReproductionWait">
            <summary>
            How long the organism must wait between reproduction.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.LifeSpan">
            <summary>
            The lifespan of the organism.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.GrowthWait">
            <summary>
            How long the organism must wait to grow.
            </summary>
        </member>
        <member name="P:Terrarium.Game.Species.MaximumEnergyPerUnitRadius">
            <summary>
            The maximum amount of energy the organism can store.
            </summary>
        </member>
        <member name="M:Terrarium.Game.Species.IsSameSpecies(OrganismBase.ISpecies)">
            <summary>
             This method can be used to compare another species to this species
             and determine if they match.
            </summary>
            <param name="species">The species to be compared</param>
            <returns>True if the species match, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.Species.GetAttributeWarnings">
            <summary>
             Gets attribute warnings for specific attributes when points are being wasted
             or points are out of bounds.
            </summary>
            <returns>A message containing attribute warnings, or an empty string.</returns>
        </member>
        <member name="M:Terrarium.Game.Species.InitializeNewState(System.Drawing.Point,System.Int32)">
            <summary>
             Required method for any derived classes that can be used to
             create a new state object based on the species.
            </summary>
            <param name="position">The position for the new state.</param>
            <param name="generation">The creature's generation for the new state.</param>
            <returns>A state object based on the species object.</returns>
        </member>
        <member name="M:Terrarium.Game.Species.GetSpeciesFromAssembly(System.Reflection.Assembly)">
            <summary>
             Called to create a new species object from the given assembly.  This
             should be the only entry point for creating a new species object.
            </summary>
            <param name="organismAssembly">The assembly to generate the species from.</param>
            <returns>A new species object generated from the assembly.</returns>
        </member>
        <member name="T:Terrarium.Game.EngineStateChangeType">
            <summary>
                An EngineStateChangeEvent is raised when some interesting change 
                in state occurs such as an animal being born or dying or being 
                teleported into your world or out. 
            </summary>
        </member>
        <member name="F:Terrarium.Game.EngineStateChangeType.AnimalTeleported">
            <summary>
             The engine is giving notification of a teleportation event.
            </summary>
        </member>
        <member name="F:Terrarium.Game.EngineStateChangeType.Other">
            <summary>
             The engine is giving notification of a random event.
            </summary>
        </member>
        <member name="F:Terrarium.Game.EngineStateChangeType.DeveloperInformation">
            <summary>
             The engine is giving notification of developer information.
            </summary>
        </member>
        <member name="T:Terrarium.Game.EngineStateChangedEventArgs">
            <summary>
                An EngineStateChangeEvent is raised when some interesting change 
                in state occurs such as an animal being born or dying or being 
                teleported into your world or out. 
                
                Its main purpose is to provide some useful feedback to the UI
                
                This EventArgs describes that event. It contains the type of state change and 
                a short description and a long description
            </summary>
        </member>
        <member name="M:Terrarium.Game.EngineStateChangedEventArgs.#ctor(Terrarium.Game.EngineStateChangeType,System.String)">
            <summary>
             Creates a new set of event arguments for a state change with short message.
            </summary>
            <param name="stateChange">The state change type</param>
            <param name="shortDescription">A short description</param>
        </member>
        <member name="M:Terrarium.Game.EngineStateChangedEventArgs.#ctor(Terrarium.Game.EngineStateChangeType,System.String,System.String)">
            <summary>
             Creates a new set of event arguments for a state change with short and long messages.
            </summary>
            <param name="stateChange">The state change type</param>
            <param name="shortDescription">A short description</param>
            <param name="longDescription">A detailed description</param>
        </member>
        <member name="P:Terrarium.Game.EngineStateChangedEventArgs.LongDescription">
            <summary>
             Retrieves the long description from these event arguments.
            </summary>
        </member>
        <member name="P:Terrarium.Game.EngineStateChangedEventArgs.ShortDescription">
            <summary>
             Retrieves the short description from these event arguments.
            </summary>
        </member>
        <member name="P:Terrarium.Game.EngineStateChangedEventArgs.StateChange">
            <summary>
             Retrieves the engine state change type for these event arguments.
            </summary>
        </member>
        <member name="M:Terrarium.Game.EngineStateChangedEventArgs.AnimalArrived(OrganismBase.OrganismState)">
            <summary>
             Creates a new event relating to a creature arriving.
            </summary>
            <param name="organismState">The creature arriving.</param>
            <returns>State change initialized for a teleporting creature with messages.</returns>
        </member>
        <member name="M:Terrarium.Game.EngineStateChangedEventArgs.AnimalDestroyed(OrganismBase.OrganismState,OrganismBase.PopulationChangeReason)">
            <summary>
             Creates a new event relating to a creature being destroyed.
            </summary>
            <param name="organismState">The creature being destroyed.</param>
            <param name="reason">The reason the creature is being destroyed.</param>
            <returns>State change initialized for a creature being destroyed with messages.</returns>
        </member>
        <member name="T:Terrarium.Game.WorldVectorChangedEventArgs">
            <summary>
             Used to notify clients that the world vector of the
             engine has been changed.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldVectorChangedEventArgs.#ctor(Terrarium.Game.WorldVector,Terrarium.Game.WorldVector)">
            <summary>
             Creates a new set of event arguments for when the world vector changes.
            </summary>
            <param name="oldVector">The previous world vector object.</param>
            <param name="newVector">The new world vector object.</param>
        </member>
        <member name="P:Terrarium.Game.WorldVectorChangedEventArgs.OldVector">
            <summary>
             Retrieves the old world vector object.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldVectorChangedEventArgs.NewVector">
            <summary>
             Retrieves the new world vector object.
            </summary>
        </member>
        <member name="T:Terrarium.Game.EngineStateChangedEventHandler">
            <summary>
                An EngineStateChangeEvent is raised when some interesting change 
                in state occurs such as being teleported into or out of your world. 
            </summary>
        </member>
        <member name="T:Terrarium.Game.PacAssembliesChangedEventHandler">
            <summary>
             Delegate used to define an event for notifying clients
             when assemblies within the PrivateAssemblyCache have changed.
            </summary>
        </member>
        <member name="T:Terrarium.Game.WorldVectorChangedEventHandler">
            <summary>
             Delegate used to define an event on the gaming engine
             to notify clients of when the world vector has been
             changed.
            </summary>
        </member>
        <member name="T:Terrarium.Game.AbortPeerDiscussionException">
            <summary>
             Exception thrown whenever an issue happens during peer communication and we want to
             abort the communication and just teleport locally.
            </summary>
        </member>
        <member name="M:Terrarium.Game.AbortPeerDiscussionException.#ctor(System.String)">
            <summary>
             Creates a new peer abort exception given a reason for the
             communication being aborted.
            </summary>
            <param name="reason">The reason communicaton was terminated.</param>
        </member>
        <member name="T:Terrarium.Game.AttributeRequiredException">
            <summary>
             Exception is thrown whenever a required creature attribute
             has not been supplied in the assembly.
            </summary>
        </member>
        <member name="M:Terrarium.Game.AttributeRequiredException.#ctor(System.String)">
            <summary>
             Create a new required attribute exception for the given
             characteristic.
            </summary>
            <param name="characteristic">The missing characteristic.</param>
        </member>
        <member name="T:Terrarium.Game.InvalidPeerException">
            <summary>
             Thrown when a peer is unable to connect to various remote
             web services.  This demonstrates a peer that might not
             have an internet connection or that is behind a highly
             restrictive firewall.
            </summary>
        </member>
        <member name="M:Terrarium.Game.InvalidPeerException.#ctor">
            <summary>
             Creates a default invalid peer exception object.
            </summary>
        </member>
        <member name="T:Terrarium.Game.MaliciousOrganismException">
            <summary>
             Thrown by a special Terrarium creature class that is used to replace
             an organism that has been blacklisted.  This enables the removal of
             creatures without having to delete the entire EcoSystem.
            </summary>
        </member>
        <member name="M:Terrarium.Game.MaliciousOrganismException.#ctor">
            <summary>
             Creates a default MaliciousOrganismException
            </summary>
        </member>
        <member name="T:Terrarium.Game.OrganismAlreadyExistsException">
            <summary>
             This exception is thrown when an organism is inserted into
             the game engine, but another organism with the same Unique
             ID already exists.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismAlreadyExistsException.#ctor">
            <summary>
             Creates a default instance of the OrganismAlreadyExistsException
            </summary>
        </member>
        <member name="T:Terrarium.Game.OrganismAssemblyFailedValidationException">
            <summary>
             Exception thrown after an assembly validation has been run
             using the AsmCheck component.  This exception is then used
             to display an error message to the user about which code
             in the assembly needs to be fixed.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismAssemblyFailedValidationException.#ctor">
            <summary>
             Creates a default assembly validation failure.  No special
             failure information is supplied.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismAssemblyFailedValidationException.#ctor(System.String)">
            <summary>
             Creates an assembly validation failure given a special
             message to supply to the user.
            </summary>
            <param name="message">The message to supply to the user.</param>
        </member>
        <member name="M:Terrarium.Game.OrganismAssemblyFailedValidationException.GenerateExceptionFromXml(System.String)">
            <summary>
             Creates an assembly validation failure object from an XML file
             generated by the AsmCheck API that can be used to notify the
             user of multiple validation failures.
            </summary>
            <param name="xmlFile">An XML file containing failures.</param>
            <returns>A customized exception based on the AsmCheck XML report.</returns>
        </member>
        <member name="T:Terrarium.Game.OrganismBlacklistedException">
            <summary>
             Exception is thrown whenever an organism needs to be blacklisted.
            </summary>
        </member>
        <member name="T:Terrarium.Game.OrganismBlacklistException">
            <summary>
             Exception thrown based on returns from the reporting
             server to indicate that one of your creature's has
             been blacklisted globally.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismBlacklistException.#ctor">
            <summary>
             Generates a default OrganismBlacklistException
            </summary>
        </member>
        <member name="T:Terrarium.Game.ShutdownFailureException">
            <summary>
             An exception used to indicate that a failure has occured that warrants
             a Terrarium client shutdown.  This exception is implemented by the
             engine class through the use of a special failure notification variable.
            </summary>
        </member>
        <member name="M:Terrarium.Game.ShutdownFailureException.#ctor">
            <summary>
             Generates a default ShutdownFailureException
            </summary>
        </member>
        <member name="T:Terrarium.Game.StateCorruptedException">
            <summary>
             An exception used whenever the game state has
             become corrupted.  This is generally as a result
             of feedback from the reporting web service.
            </summary>
        </member>
        <member name="M:Terrarium.Game.StateCorruptedException.#ctor(System.Int32)">
            <summary>
             Creates a new corruption exception using the last reported tick
             information.
            </summary>
            <param name="lastReportedTick">The game tick number for the last reported tick.</param>
        </member>
        <member name="P:Terrarium.Game.StateCorruptedException.LastReportedTick">
            <summary>
             Provides access to the tick ID of the last reported tick.
            </summary>
        </member>
        <member name="T:Terrarium.Game.StateTimedOutException">
            <summary>
             Exception thrown when the Terrarium client realizes
             it hasn't reported to the reporting server for over 48
             hours.
            </summary>
        </member>
        <member name="M:Terrarium.Game.StateTimedOutException.#ctor">
            <summary>
             Generates a default StateTimedOutException
            </summary>
        </member>
        <member name="T:Terrarium.Game.GameEngine">
            <summary>
             This class encapsulates the majority of the Terrarium gaming engine
             that controls the creatures, updates of the world data, manipulation
             of events, and other common engine features.
             To see the basic game logic, look at the ProcessTurn() function.  This 
             is what controls the flow of the game.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._engine">
            <summary>
             Provides static access to the current gaming engine.  This is
             useful for quickly getting a handle to the game engine, but
             makes it impossible to host multiple game engines in the same
             process.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._newOrganismQueue">
            <summary>
             Queue for managing the insertion of new creatures into the
             game.  They are queue'd up and added to the world at a point that is "safe".
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._removeOrganismQueue">
            <summary>
             Queue for managing the removal of creatures from the game.  Again, they are
             queued and removed at a safe point.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._scheduler">
            <summary>
             The game scheduler is responsible for managing creature time
             slices.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._currentVector">
            <summary>
             This WorldVector object contains the current state of the world, as well as
             the actions animals would like to perform to it to create the next state.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._ledIndicators">
            <summary>
             Array referencing each of the LED indicators within the
             UI portion of the Terrarium.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._newWorldState">
            <summary>
            This is the state object that gets built up that eventually represents the
            next state the world will be in.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._organismIDList">
            <summary>
             Listing of all organism IDs in the currentVector, used for enhancing enumeration
             structures.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._plantCount">
            <summary>
             Identifies the current count of Plant class creatures in the
             game engine.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._turnPhase">
            <summary>
            The processing of each actual turn of the game is broken down into steps so that we can paint the screen
            in between them.  turnPhase represents what step we are currently doing.
            </summary>
        </member>
        <member name="F:Terrarium.Game.GameEngine._usingNetwork">
            <summary>
             Indicates whether or not the Network engine is going
             to be used to enable a connected Terrarium.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Terrarium.Forms.TerrariumLed[],System.Boolean)">
            <summary>
             Constructs a new game engine.
            </summary>
            <param name="dataPath">The path to save game directory.</param>
            <param name="useNetwork">Controls the usage of the network engine.</param>
            <param name="deserializeState">Controls if the state is deserialized or not.</param>
            <param name="fileName">The path to the state file.</param>
            <param name="reportData">Determines if data should be reported.</param>
            <param name="leds">Provides a listing of game leds that can be used.</param>
            <param name="trackLastRun">Controls whether the PAC keeps track of the last run creature for blacklisting.</param>
        </member>
        <member name="P:Terrarium.Game.GameEngine.NetworkEngine">
            <summary>
            NetworkEngine is a reference to the network object that does all peer to peer communication
            for this instance of the game.
            </summary>
            <returns>A reference to the network engine.</returns>
        </member>
        <member name="P:Terrarium.Game.GameEngine.Pac">
            <summary>
             Provides a managed location for creature assemblies.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.PeerCount">
            <summary>
             Returns the number of peers from the network engine.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.PeerChannel">
            <summary>
             Gets the current peer channel from the network engine.  Also
             allows the user to change the peer channel and network with
             a different set of machines.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.EcosystemMode">
            <summary>
             Determines if the engine is in EcoSystem mode or some other mode.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.FileName">
            <summary>
             Returns the name of the current state file.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.LogState">
            <summary>
             Determines if game state should be logged after each tick.
             This is useful for debugging mode only.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.Scheduler">
            <summary>
             Provides access to the game scheduler for scheduling creatures.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.CurrentVector">
            <summary>
             Provides access to the current world vector
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.Current">
            <summary>
             Static access to the current game engine.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.ShutdownError">
            <summary>
             Used to notify the game engine that a shutdown level
             error has occured.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.InvalidPeerError">
            <summary>
             Used to notify the game engine that the peer is not
             able to play the game networked.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.PopulationData">
            <summary>
             Provides access to the population data used
             for reporting.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.WorldHeight">
            <summary>
             Provides the height of the given world in game units (pixels)
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.WorldWidth">
            <summary>
             Provides the width of the given world in game units (pixels)
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.GridWidth">
            <summary>
             Converts world width to grid cells and returns the number of
             grid cells.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.GridHeight">
            <summary>
             Converts world height to grid cells and returns the number of
             grid cells.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.MaxAnimals">
            <summary>
             Identifies the maximum amount of Animal class creatures allowed
             in the game engine.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.MaxPlants">
            <summary>
             Identifies the maximum amount of Plant class creatures allowed
             in the game engine.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.AnimalCount">
            <summary>
             Identifies the current count of Animal class creatures in the
             game engine.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.TurnPhase">
            <summary>
             The current turn phase.  There are ten phases per tick.
            </summary>
        </member>
        <member name="P:Terrarium.Game.GameEngine.IsNetworkEnabled">
            <summary>
            Used to determine if the network is running
            </summary>
        </member>
        <member name="E:Terrarium.Game.GameEngine.WorldVectorChanged">
            <summary>
             Event that can be handled by clients that notifies them when
             the world vector is changed.
            </summary>
        </member>
        <member name="E:Terrarium.Game.GameEngine.EngineStateChanged">
            <summary>
             Event that can be handled by clients to be notified whenever
             some interesting state in the engine has changed. Used for notifications in 
             the UI.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.StopGame(System.Boolean)">
            <summary>
             Stops the game and determines if the final tick of data should be serialized.
            </summary>
            <param name="serializeState">Controls if the state is serialized.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.CalculateWorldSize">
            <summary>
            This routine attempts to figure out how fast the machine is by
            running some standardized tests to test code execution speed.  It
            then uses this information to determine how big the Terrarium world
            should be on this machine to maintain a decent frame rate. It also
            determines how big of a time slice we should give each animal.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.computeWorldHeight">
            <summary>
            Now lets compute worldheight
            Each animal needs a certain amount of territory so we can compute a density.
            10,000 pixels per plant/animal is the key at this point.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.estimateNumberOfAnimalsToSupport">
            <summary>
            This is where we attempt to estimate how many animals we can support on this machine.
            We assume we want 20 frames a second and we do two engine ticks per second which means we have
            500 msec per engine tick.  We budget our paint time 200 mSec, and that leaves 300 mSec for all engine
            processing.
            We assume we'll allocate 4/5 of our available engine processing time to running animals, and 1/5 to plants.
            organismQuanta is how many microseconds each animal will get, so we have to divide by 1000
            to get milliseconds.
            We assume that we can use all engine processing time for running animals although this isn't strictly true
            since we need to run the engine code too.  It's OK, because animals can't use all their allocated time every
            tick -- they'll eventually get killed. Thus, we use the time they don't use for the engine processing.
            It's all basically an estimate, that we've tuned and works pretty well.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.NewTerrariumGame(System.String,System.String,Terrarium.Forms.TerrariumLed[])">
            <summary>
             Creates a new game engine that can be used for a Terrarium game.  Terrarium
             games aren't networked and can load any creatures.
            </summary>
            <param name="dataPath">The path where the Terrarium game will be stored.</param>
            <param name="fileName">The path to the serialized Terrarium.</param>
            <param name="leds">A series of leds to be used for state reporting.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.LoadTerrariumGame(System.String,System.String,Terrarium.Forms.TerrariumLed[])">
            <summary>
             Creates a game engine that loads an existing Terrarium game save state.
            </summary>
            <param name="dataPath">The path where the Terrarium game will be stored.</param>
            <param name="fileName">The path to the serialized Terrarium.</param>
            <param name="leds">A series of leds to be used for state reporting.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.NewEcosystemGame(System.String,System.String,Terrarium.Forms.TerrariumLed[])">
            <summary>
             Creates a new game engine that can be used to play an EcoSystem game.
            </summary>
            <param name="dataPath">The path where the Terrarium game will be stored.</param>
            <param name="fileName">The path to the serialized Terrarium.</param>
            <param name="leds">A series of leds to be used for state reporting.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.LoadEcosystemGame(System.String,System.String,Terrarium.Forms.TerrariumLed[])">
            <summary>
             Creates a new game engine that can be used to load a pre-existing
             EcoSystem game.
            </summary>
            <param name="dataPath">The path where the Terrarium game will be stored.</param>
            <param name="fileName">The path to the serialized Terrarium.</param>
            <param name="leds">A series of leds to be used for state reporting.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.OnWorldVectorChanged(Terrarium.Game.WorldVectorChangedEventArgs)">
            <summary>
             Helper function for the WorldVectorChanged event to fire
             the event given a new WorldVectorChangedEventArgs.
            </summary>
            <param name="e">References to the new and old vectors.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.OnEngineStateChanged(Terrarium.Game.EngineStateChangedEventArgs)">
            <summary>
             Helper function for the EngineStateChanged event to fire
             the event given a new EngineStateChangedEventArgs
            </summary>
            <param name="e">Properties identifying the change to the engine.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.countOrganism(OrganismBase.OrganismState,OrganismBase.PopulationChangeReason)">
            <summary>
             Adds another organism to the count of organisms.  Depending on the organism
             type either plants or animals will be incremented.
            </summary>
            <param name="state">The state of the creature.</param>
            <param name="reason">The reason the creature is being added.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.uncountOrganism(OrganismBase.OrganismState,OrganismBase.PopulationChangeReason)">
            <summary>
             Subtracts an organism from the count of organisms.  Depending on the 
             organism type either plants or animals will be decremented.
            </summary>
            <param name="state">The state of the creature.</param>
            <param name="reason">The reason the creature is being removed.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.serializeState(System.String)">
            <summary>
             Serializes the game state to the given path.
            </summary>
            <param name="path">Path to the state file.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.deserializeState(System.String)">
            <summary>
             Deserializes the game state from the given path.
            </summary>
            <param name="path">Path to the serialized game state.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.findEmptyPosition(System.Int32,System.Drawing.Point)">
            <summary>
             Finds a location within the current game world where no organisms exist.
            </summary>
            <param name="cellRadius">The cell radius of the new creature to be inserted.</param>
            <param name="preferredGridPoint">The perferred location for the new creature.</param>
            <returns>The empty point where the creature can be inserted.</returns>
        </member>
        <member name="M:Terrarium.Game.GameEngine.ReceiveTeleportation(System.Object,System.Boolean)">
            <summary>
             Receieves a teleported state either from a remote peer or the local peer.
            </summary>
            <param name="teleportedObject">The teleported object.</param>
            <param name="teleportedToSelf">Whether the teleportation is local or from a remote peer.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.Teleport(OrganismBase.OrganismState)">
            <summary>
             Can be called with an OrganismState that needs to be teleported.
             Cannot be called during MoveAnimals since it passes true to the clearOld
             argument in RemoveOrganism.
            </summary>
            <param name="state">The state of the creature to be teleported.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.AddNewOrganism(Terrarium.Game.Species,System.Drawing.Point)">
            <summary>
             Add a new organism given the species of the creature, and the
             preferred location of insertion.
            </summary>
            <param name="species">The species for the new organism.</param>
            <param name="preferredLocation">The preferred insertion point.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.AddNewOrganism(System.String,System.Drawing.Point,System.Boolean)">
            <summary>
             Add a new organism to the terrarium using the given assembly to generate
             a species from, a preferred insertion point, and whether this is a reintroduction
             or not.
            </summary>
            <param name="assemblyPath">The path to the assembly used for this creature.</param>
            <param name="preferredLocation">The preferred point of insertion.</param>
            <param name="reintroduction">Controls if this is a reintroduction.</param>
            <returns>A species object for the new organism.</returns>
        </member>
        <member name="M:Terrarium.Game.GameEngine.insertOrganismsFromQueue">
            <summary>
             Inserts all new organisms from the queue when it is safe to insert
             them.  This happens so that all new organism are inserted at the
             same time in a serial manner rather than in multiple phases.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.RemoveOrganismQueued(Terrarium.Game.KilledOrganism)">
            <summary>
             Method used to add an organism to the organism removal queue.
            </summary>
            <param name="killedOrganism">The organism to remove.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.removeOrganismsFromQueue">
            <summary>
             Method used to remove organisms that have been queued for removal.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.removeOrganism(Terrarium.Game.KilledOrganism)">
            <summary>
             Method used to remove an organism given a KilledOrganism object.
             This method instantly removes the organism and so should not
             be called by normal code, rather call RemoveOrganismQueued.
            </summary>
            <param name="killedOrganism">The organism to be removed.</param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.ProcessTurn">
            <summary>
            Processes turns in a phase manner.  After 10 calls to ProcessTurn
            all 10 phases will be complete and the method will have completed
            one game tick.
            </summary>
            <returns>True if a tick has been processed, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.GameEngine.changeMovementVectors">
            <summary>
            Helper function to change movement vectors for all creatures after
            they have processed their turn and determined new points of destination.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.doAntennas">
            <summary>
            Helper function to update all state objects with the latest antenna
            information after the creature's have processed their ticks.
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.doDefends">
            <summary>
            We only send these events so that animals can easily continue
            defending if they want to.  There is no information in them
            </summary>
        </member>
        <member name="M:Terrarium.Game.GameEngine.sortOrganismsForDisease(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IList)">
            <summary>
            Fills in the hashtables with sorted lists keyed on SpeciesName
            </summary>
            <param name="plantsToKill"></param>
            <param name="animalsToKill"></param>
            <param name="deadAnimals"></param>
        </member>
        <member name="M:Terrarium.Game.GameEngine.doBites">
            <summary>
            Assumes the animal was dead (if an animal) at the time of the bite
            and that it is the proper food source for this animal (herbivore or carnivore)
            Also assumes that it is within biting range.
            </summary>
        </member>
        <member name="T:Terrarium.Game.GridIndex.SegmentWrapper">
            <summary>
            The segment wrapper allows us to put the same exact segment in several different cells of the grid.
            We do this because an animal occupies many cells at once and needs to either occupy them all, or none
            of them.  Thus, we wrap the segment in a segment wrapper and stick the wrapper into the cell to represent
            the fact that this segment is in that cell.  We give the SegmentWrapper a backpointer to the arraylist of
            other SegmentWrappers that are in the cell as well
            </summary>
        </member>
        <member name="T:Terrarium.Game.GridIndex.SegmentWrapperComparer">
            <summary>
            Sorts two segments by comparing when they entered a cell.  The earlier
            entry time into the cell wins
            </summary>
        </member>
        <member name="P:Terrarium.Game.MovementSegment.CellsLeftToResolve">
            <summary>
            Since an organism actually occupies multiple cells, this member variable tracks how many cells
            it is occupying that we haven't 'resolved' yet (see notes in GridIndex for a description of "resolving".  
            Once this goes to zero, we know that the movement this segment represents can occur, because all of
            the cells are not occupied at this point in time
            </summary>
        </member>
        <member name="T:Terrarium.Game.OrganismAssemblyInfo">
            <summary>
             Contains assembly information about an organism.
            </summary>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.OrganismAssemblyInfo.#ctor(System.String,System.String)">
            <summary>
             Creates a new info object using the full name of the assembly
             and the short name.
            </summary>
            <param name="assemblyFullName">The full assembly name.</param>
            <param name="assemblyShortName">The assembly short name.</param>
        </member>
        <member name="P:Terrarium.Game.OrganismAssemblyInfo.FullName">
            <summary>
             Returns the assembly full name that was saved on this info object.
            </summary>
        </member>
        <member name="P:Terrarium.Game.OrganismAssemblyInfo.ShortName">
            <summary>
             Returns the assembly short name that was saved on this info object.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismAssemblyInfo.ToString">
            <summary>
             Returns a string representation of this organism info object.  This
             is primarily useful for when the class is used as a list item.
            </summary>
            <returns>The assembly short name.</returns>
        </member>
        <member name="T:Terrarium.Game.OrganismBaseBinder">
            <summary>
             Base class for all serialization binders.  Contains
             methods for validating a number of common assemblies.
             The Binder is being added so that we can validate data being deserialized.  We
             want to make sure someone doesn't insert bogus types into the stream or types
             that might be able to be loaded on the destination client and used for the
             purposes of a hack.
            </summary>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.CompareParts(System.String,System.String)">
            <summary>
             The purpose of this function is to make sure that the assemblies are effectively the
             same, everything except version number.  This is how we check what assemblies
             serialization is trying to deserialize.  
             Sample:
             mscorlib, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
            </summary>
            <param name="asm1">Full Assembly name of the first assembly.</param>
            <param name="asm2">Full assembly name of the second assembly.</param>
            <returns>True if the assemblies match in part, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.IsOrganismBase(System.String)">
            <summary>
             Determines if an assembly full name matches that of OrganismBase.dll
            </summary>
            <param name="asm">assembly full name to match.</param>
            <returns>True if the assembly is OrganismBase.dll</returns>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.IsMscorlib(System.String)">
            <summary>
             Determines if an assembly full name matches that of MSCorLib.dll
            </summary>
            <param name="asm">assembly full name to match.</param>
            <returns>True if the assembly is MSCorLib.dll</returns>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.IsSystemDrawing(System.String)">
            <summary>
             Determines if an assembly full name matches that of System.Drawing.dll
            </summary>
            <param name="asm">assembly full name to match.</param>
            <returns>True if the assembly is System.Drawing.dll</returns>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.IsTerrarium(System.String)">
            <summary>
             Determines if an assembly full name matches that of TerrariumEngine.dll
            </summary>
            <param name="asm">assembly full name to match.</param>
            <returns>True if the assembly is TerrariumEngine.dll</returns>
        </member>
        <member name="M:Terrarium.Game.OrganismBaseBinder.IsSystem(System.String)">
            <summary>
             Determines if an assembly full name matches that of System.dll
            </summary>
            <param name="asm">assembly full name to match.</param>
            <returns>True if the assembly is System.dll</returns>
        </member>
        <member name="T:Terrarium.Game.OrganismQuanta">
            <summary>
            This class performance tests the machine against some canonical animal code.
            Basically, we try to standardize how much code can get run in a time slice since
            we want the same animal to be able to be run on different machines, but we want
            to allow faster machines to run more animals.  Thus we attempt to modify the 
            size of the time slice based on the speed of the machine.  Quanta is the size
            in microseconds of the time slice we're allowing.
            </summary>
        </member>
        <member name="T:Terrarium.Game.PopulationData">
            <summary>
             Represents the population state of a Terrarium by handling
             all game events that lead to adding or removing creatures
             from the system.  Also handles all population change reasons
             to give per reason reporting.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PopulationData.#ctor(System.Boolean,Terrarium.Forms.TerrariumLed)">
            <summary>
             Creates a new PopulationData class that can be used to report data and
             update a status LED.
            </summary>
            <param name="reportData">Should data be reported to the server.</param>
            <param name="led">An LED used to indicate status.</param>
        </member>
        <member name="P:Terrarium.Game.PopulationData.LastReportedTick">
            <summary>
             Remebers the last tick that data was reported to the server.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PopulationData.InitWebService">
            <summary>
             Initializes the web service proxies.  These are dynamically generated and so
             this method only generates them one time to improve memory and performance.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PopulationData.Close">
            <summary>
             Closes the PopulationData class and stops in any progress or pending
             connections.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PopulationData.ResetData">
            <summary>
             Resets the data in the PopulationData class to initial values.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PopulationData.IsReportingTick(System.Int32)">
            <summary>
             Determines if the current tick is a reporting tick.  We only report data 
             every so often, and a report tick is the tick when we report data.
            </summary>
            <param name="tickNumber">The current tick number.</param>
            <returns>True if the tick is a reporting tick, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.PopulationData.BeginTick(System.Int32,System.Guid)">
            <summary>
             Begins a game engine tick indicating the tick number and the world
             state GUID.
            </summary>
            <param name="tickNumber">The current tick number.</param>
            <param name="guid">The world state GUID.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.GetCurrentReportingStats(System.Guid,System.Int32)">
            <summary>
             Gets a dataset of the current reporting statistics.  This data can
             be used to update datagrids, charts, or other reporting facilities.
            </summary>
            <param name="peerGuid">The world state GUID for this peer.</param>
            <param name="tick">The current tick number.</param>
            <returns>The current world data.</returns>
        </member>
        <member name="M:Terrarium.Game.PopulationData.ReportData(System.Data.DataSet,System.Guid)">
            <summary>
             Attemps to report data to the central server.
            </summary>
            <param name="newData">The data to be reported.</param>
            <param name="peerStateGuid">The peer's state GUID.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.ReportServiceCallback(System.IAsyncResult)">
            <summary>
             Callback method used by the reporting service methods to enable
             Async reporting.
            </summary>
            <param name="asyncResult">The results of the method.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.EndTick(System.Int32)">
            <summary>
             Ends a game tick.
            </summary>
            <param name="tickNumber">The tick number.  Should always be the same as the call to BeginTick.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.CountOrganism(System.String,OrganismBase.PopulationChangeReason,System.Int32)">
            <summary>
             Counts a new organism and adds it to the current dataset.
            </summary>
            <param name="speciesName">The name of the species being added.</param>
            <param name="reason">The reason for being added.</param>
            <param name="count">The number to add.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.CountOrganism(System.String,OrganismBase.PopulationChangeReason)">
            <summary>
             Counts a new organism and adds it to the reporting data.
            </summary>
            <param name="speciesName">The name of the species to add.</param>
            <param name="reason">The reason for bing added.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.UncountOrganism(System.String,OrganismBase.PopulationChangeReason,System.Int32)">
            <summary>
             Counts a new organism and removes it from the reporting data.
            </summary>
            <param name="speciesName">The name of the species the data is for.</param>
            <param name="reason">The reason for removing.</param>
            <param name="count">The number to remove.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.UncountOrganism(System.String,OrganismBase.PopulationChangeReason)">
            <summary>
             Counts a new organism and removes it from the data.
            </summary>
            <param name="speciesName">The name of the species the data is for.</param>
            <param name="reason">The reason the creature is being removed.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.Data">
            <summary>
             Get the current reporting data.
            </summary>
            <returns>The current reporting data.</returns>
        </member>
        <member name="M:Terrarium.Game.PopulationData.CreateReportDataSet">
            <summary>
             Creates a dataset in the form that the reporting server
             is expecting.
            </summary>
            <returns>A reporting server compatible dataset.</returns>
        </member>
        <member name="M:Terrarium.Game.PopulationData.FillReportTable(System.Data.DataTable,System.Guid,System.Int32)">
            <summary>
             Fill the dataset with data in the format expected by the reporting server.
            </summary>
            <param name="totalsOnlyTable">A datatable in the reporting server format.</param>
            <param name="peerStateGuid">The current world state GUID.</param>
            <param name="tickNumber">The current tick number.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.AddToTotals(System.Data.DataSet@,System.Data.DataSet)">
            <summary>
             Add up reporting totals so that a cumulative report can be given
             to the user via a dialog or other method.
            </summary>
            <param name="totalsData">The current totals data.</param>
            <param name="newData">The new data to be added.</param>
        </member>
        <member name="M:Terrarium.Game.PopulationData.addValues(System.Object,System.Object)">
            <summary>
             Helper function to add two database values together.
            </summary>
            <param name="value1">Value to be added to.</param>
            <param name="value2">Value to be added.</param>
            <returns>The sum of the two values.</returns>
        </member>
        <member name="M:Terrarium.Game.PopulationData.NullToZero(System.Object)">
            <summary>
             Helper function to convert DBNull to 0
            </summary>
            <param name="value">The value to check.</param>
            <returns>The value or 0 if DBNull</returns>
        </member>
        <member name="T:Terrarium.Game.PrivateAssemblyCache">
            <summary>
             A special cache that protects storage of organism assemblies
             and provides assembly resolving features.  We store all organism assemblies
             in a special obfuscated directory so that malicious code can't send assemblies
             to Terrarium and then take advantage of exploits in them later.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.#cctor">
            <summary>
             Initializes a versioned directory preamble used to create
             versioned assembly directories.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.#ctor(System.String,System.String)">
            <summary>
             Creates a new private assembly cache initialized with a data path and
             data file.
            </summary>
            <param name="dataPath">Path where the data will be stored.</param>
            <param name="dataFile">Path to a tracking data file.</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             Creates a new private assembly cache initialized with a data path,
             data file, and controls whether assemblies are resolved, and organism
             tracking is in effect.
            </summary>
            <param name="dataPath">Path to where the cache will be stored.</param>
            <param name="dataFile">Path to the tracking data file.</param>
            <param name="hookAssemblyResolve">Determines if the assembly resolving events are hooked.</param>
            <param name="trackLastRun">Determines if organism tracking is senabled.</param>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.LastRun">
            <summary>
             We track when organisms are running and Terrarium shuts down unexpectedly so that
             we can blacklist them.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.AssemblyDirectory">
            <summary>
             Returns the path to the assembly cache directory.
            </summary>
            <threadsafe/>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.BaseAssemblyDirectory">
            <summary>
             Returns the base assembly directory without obfuscation.
            </summary>
            <threadsafe/>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.PacSize">
            <summary>
             Return the approximate size of the PAC in memory based on loaded
             assemblies.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.PacOrganismCount">
            <summary>
             Return the approximate amount of organisms loaded from
             the current PAC.
            </summary>
        </member>
        <member name="P:Terrarium.Game.PrivateAssemblyCache.VersionedDirectoryPreamble">
            <summary>
             Provides access to the versioned directory preamble for generating
             cache directories.
            </summary>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.Initialize(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             Helper function for initializing the PAC constructors.
            </summary>
            <param name="dataPath">Path to where the cache will be stored.</param>
            <param name="dataFile">Path to the tracking data file.</param>
            <param name="hookAssemblyResolve">Determines if the assembly resolving events are hooked.</param>
            <param name="trackLastRun">Determines if organism tracking is senabled.</param>
        </member>
        <member name="E:Terrarium.Game.PrivateAssemblyCache.PacAssembliesChanged">
            <summary>
             Event used to notify clients when assemblies in the
             PAC have changed.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.OnPacAssembliesChanged(System.EventArgs)">
            <summary>
             Helper function for calling the PacAssembliesChanged
             event.
            </summary>
            <param name="e">Null</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.HookAssemblyResolve">
            <summary>
             Hooks the assembly resolving events for the current app
             domain.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.Close">
            <summary>
             Handles controlled shut-down of the PAC and unhooking the assembly
             resolving events.
            </summary>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetFileName(System.String)">
            <summary>
             Given an assembly full name, generates a library file name
             for an assembly.
            </summary>
            <param name="fullName">The assembly full name.</param>
            <returns>The new file name generated from an assembly name and dll extension.</returns>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetAssemblyShortName(System.String)">
            <summary>
             Given an assembly full name, generates an assembly short
             name.
            </summary>
            <param name="fullName">The assembly full name.</param>
            <returns>The short name for the assembly.</returns>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetAssemblyVersion(System.String)">
            <summary>
             Given an assembly full name, generates an assembly
             version string.
            </summary>
            <param name="fullName">The assembly full name.</param>
            <returns>The version of the assembly.</returns>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetBaseAssemblyDirectory(System.String,System.String)">
            <summary>
             Creates a base assembly directory without obfuscation from a path and file name.
            </summary>
            <param name="dataPath">The base path of the data file.</param>
            <param name="dataFile">The name of the datafile for creating a cache directory.</param>
            <returns>The base assembly directory.</returns>
            <threadsafe/>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.BlacklistAssemblies(System.String[])">
            <summary>
             Blacklist a series of assemblies by setting their assemblies to zero length
             files.  This is a way of ensuring that we don't load them again, or replace them
             with fresh working copies because the file name gets reserved with an invalid assembly.
            </summary>
            <param name="assemblies">The assemblies to be blacklisted.</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.LoadOrganismAssembly(System.String)">
            <summary>
             Load an organism assembly.  Calculate the size of the PAC
             based on the assemblies loaded.
            </summary>
            <param name="fullName">The name of the assembly to load.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.Exists(System.String)">
            <summary>
             Determine if the assembly with the given full name exists
             within the PAC.
            </summary>
            <param name="fullName">The full name of the assembly to check for.</param>
            <returns>True if the assembly exists, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.SaveOrganismBytes(System.Byte[],System.String)">
            <summary>
             Saves the array of bytes given an assembly full name to
             the private assembly cache.
            </summary>
            <param name="bytes">The bytes of the assembly.</param>
            <param name="fullName">The full name of the original assembly.</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.SaveOrganismAssembly(System.String,System.String)">
            <summary>
             Save an assembly given a full path to the assembly and the full
             name of the assembly to the cache.
            </summary>
            <param name="assemblyPath">A local path to the assembly.</param>
            <param name="fullName">The full name of the assembly.</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.SaveOrganismAssembly(System.String,System.String,System.String)">
            <summary>
             Save an assembly along with symbols given a full path to the
             assembly and symbols to the cache.
            </summary>
            <param name="assemblyPath">A local path to the assembly.</param>
            <param name="symbolPath">A local path to the symbols.</param>
            <param name="fullName">The full name of the assembly.</param>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetAssemblies">
            <summary>
             Gets a full listing of all of the assemblies in the
             cache.  This can be used to populate dropdowns or lists.
            </summary>
            <returns>A set of OrganismAssemblyInfo objects for each assembly.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetBlacklistedAssemblies">
            <summary>
             Get a list of all assemblies in the cache that have
             0 bytes.  A 0 byte assembly fails to load.
            </summary>
            <returns>A listing of all 0 byte assemblies in the cache.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.ResolveAssembly(System.Object,System.ResolveEventArgs)">
            <summary>
             Called whenever assemblies are being resolved for use.
            </summary>
            <param name="sender">Unknown</param>
            <param name="args">Assembly resolve information</param>
            <returns>The assembly that matches the resolve information.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.getAssemblyWithTerrariumBindingPolicy(System.String,System.Reflection.Assembly)">
            <summary>
             Check to see if an assembly can be found that matches a reduced
             set of fusion version requirements.  We ignore the revision.
            </summary>
            <param name="testAssemblyName">The name of the test assembly.</param>
            <param name="potentialMatchAssembly">A potentially matching assembly.</param>
            <returns>The matching assembly if it really matches, else null.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.GetSafeTempFileName">
            <summary>
             Creates a temp file that can't be guessed for security reasons.
            </summary>
            <returns>A temp file GUID encoded for security.</returns>
        </member>
        <member name="M:Terrarium.Game.PrivateAssemblyCache.checkAssemblyWithReporting(System.String,System.String)">
            <summary>
             Used for assembly validation with XML reporting in AsmCheck
            </summary>
        </member>
        <member name="T:Terrarium.Game.Teleporter">
            <summary>
             Creates a teleporter object that can move around the Terrarium
             and teleport contained creatures.  This is the only non organism
             object that can exist in the Terrarium currently.
            </summary>
        </member>
        <member name="F:Terrarium.Game.Teleporter._teleportZones">
            <summary>
             Contains an array of teleportation zones that move around
             the Terrarium.
            </summary>
        </member>
        <member name="F:Terrarium.Game.Teleporter._random">
            <summary>
             A random number generator that can be used to generate
             the new locations for zones.
            </summary>
        </member>
        <member name="M:Terrarium.Game.Teleporter.#ctor(System.Int32)">
            <summary>
             Creates a Teleporter with the specified number of zones.
            </summary>
            <param name="zoneCount">The number of moving teleport zones.</param>
        </member>
        <member name="M:Terrarium.Game.Teleporter.Clone">
            <summary>
             Clones a teleporter to create a new copy.
            </summary>
            <returns>A new copy of the Teleporter</returns>
        </member>
        <member name="M:Terrarium.Game.Teleporter.Move">
            <summary>
             Moves all teleporation zones around the board.
            </summary>
        </member>
        <member name="M:Terrarium.Game.Teleporter.IsInTeleporter(OrganismBase.OrganismState)">
            <summary>
             Determines if a given creature exists within any of the teleport
             zones and if so notifies the caller.
            </summary>
            <param name="state">The organism state to be checked</param>
            <returns>True if the organism is in the teleporter, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.Teleporter.GetTeleportZone(System.Int32)">
            <summary>
             Provides access to the teleportation zones by ID.
            </summary>
            <param name="ID">The ID for the teleporter to retrieve.</param>
            <returns>The teleportzone</returns>
        </member>
        <member name="M:Terrarium.Game.Teleporter.GetTeleportZones">
            <summary>
             Provides access to the collection of TeleportZone objects.
            </summary>
            <returns>The collection of TeleportZone objects.</returns>
        </member>
        <member name="T:Terrarium.Game.TeleportZone">
            <summary>
             Creatures a new TeleportZone object.
            </summary>
        </member>
        <member name="M:Terrarium.Game.TeleportZone.#ctor(System.Drawing.Rectangle,OrganismBase.MovementVector,System.Int32)">
            <summary>
             Creates a new teleportzone with all fields initialized.
            </summary>
            <param name="rectangle">The location and size of the zone.</param>
            <param name="vector">The movement vector of the zone.</param>
            <param name="ID">The ID for this zone.</param>
        </member>
        <member name="P:Terrarium.Game.TeleportZone.Rectangle">
            <summary>
             Returns the size and location of the teleport zone.
            </summary>
            <returns>A new rectangle containing the size and location of the zone.</returns>
        </member>
        <member name="P:Terrarium.Game.TeleportZone.ID">
            <summary>
             The ID for this teleporter zone.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TeleportZone.Vector">
            <summary>
             The current movement vector for this zone.
            </summary>
        </member>
        <member name="M:Terrarium.Game.TeleportZone.Clone">
            <summary>
             Clones a TeleportZone object.
            </summary>
            <returns>A copy of the TeleportZone</returns>
        </member>
        <member name="M:Terrarium.Game.TeleportZone.SetRectangle(System.Drawing.Rectangle)">
            <summary>
             Sets the size and location of the teleport zone.
            </summary>
            <param name="rectangle">The new size and location of this teleporter.</param>
            <returns>A cloned teleport zone.</returns>
        </member>
        <member name="M:Terrarium.Game.TeleportZone.Contains(OrganismBase.OrganismState)">
            <summary>
             Determines if the given organism state is within teleport zone.
            </summary>
            <param name="state">The state being checked.</param>
            <returns>True if the state is in the zone, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.TeleportZone.SetVector(OrganismBase.MovementVector)">
            <summary>
             Get a new teleport zone that is initialized with a different
             movement vector.
            </summary>
            <param name="vector">The new movement vector.</param>
            <returns>The update teleport zone.</returns>
        </member>
        <member name="T:Terrarium.Game.TickActions">
            <summary>
             Rolls up and provides access to all actions requested by animals in a given tick.
            </summary>
        </member>
        <member name="F:Terrarium.Game.TickActions._attackActions">
            <summary>
             All of the attack actions that organisms have performed in this tick.
            </summary>
        </member>
        <member name="F:Terrarium.Game.TickActions._defendActions">
            <summary>
             All of the defend actions that organisms have performed in this tick.
            </summary>
        </member>
        <member name="F:Terrarium.Game.TickActions._eatActions">
            <summary>
             All of the eat actions that organisms have performed in this tick.
            </summary>
        </member>
        <member name="F:Terrarium.Game.TickActions._moveToActions">
            <summary>
             All of the movement actions that organisms have performed in this tick.
            </summary>
        </member>
        <member name="F:Terrarium.Game.TickActions._reproduceActions">
            <summary>
             All of the reproduce actions that organisms have performed in this tick.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TickActions.MoveToActions">
            <summary>
             Provides access to the Movement actions.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TickActions.AttackActions">
            <summary>
             Provides access to the Attack actions.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TickActions.EatActions">
            <summary>
             Provides access to the Eat actions.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TickActions.ReproduceActions">
            <summary>
             Provides access to the Reproduction actions.
            </summary>
        </member>
        <member name="P:Terrarium.Game.TickActions.DefendActions">
            <summary>
             Provides access to the Defend actions.
            </summary>
        </member>
        <member name="M:Terrarium.Game.TickActions.GatherActionsFromOrganisms(Terrarium.Hosting.IGameScheduler)">
            <summary>
             Rips through all organisms and wraps their pending actions
             up into the hashtables on a per action type basis.
            </summary>
            <param name="scheduler">The game scheduler that has all of the organisms.</param>
        </member>
        <member name="T:Terrarium.Game.WorldState">
            <summary>
             Contains the full state of the world at a given tick.  Contains
             state objects for all organisms.  It is immutable once we have finished 
             a game tick and can stay around for as long as needed to represent the state
             of the world at that point in time.
            </summary>
            <immutable/>
        </member>
        <member name="M:Terrarium.Game.WorldState.#ctor(System.Int32,System.Int32)">
            <summary>
             Creates a new world state with the given number of grid cells.
            </summary>
            <param name="gridWidth">The width of the world state in grid cells.</param>
            <param name="gridHeight">The height of the world state in grid cells.</param>
        </member>
        <member name="P:Terrarium.Game.WorldState.IndexBuilt">
            <summary>
             Determines if the cell index has been built.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.Organisms">
            <summary>
             Returns the collection of organisms.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.ZOrderedOrganisms">
            <summary>
             Returns the collection or organisms ZOrdered using
             their Y value.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.StateGuid">
            <summary>
             Returns the GUID for the world state.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.TickNumber">
            <summary>
             Returns the tick number of the current world state.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.Teleporter">
            <summary>
             Provides access to the teleporters.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.OrganismIDs">
            <summary>
             Provides the collection of organism IDs
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldState.IsImmutable">
            <summary>
             Determines if the current state is immutable.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldState.DuplicateMutable">
            <summary>
             Copies the object, but not the isImmutable bit.  Makes a newly
             immutable copy.
            </summary>
            <returns>A new WorldState object that is newly mutable.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.ClearIndex">
            <summary>
             Clear the current cell index.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldState.BuildIndex">
            <summary>
             Build the cell index.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldState.buildIndexInternal(System.Boolean)">
            <summary>
             Builds the cell index.
            </summary>
            <param name="isDeserializing">Determines if the engine is in the state of deserializing.</param>
        </member>
        <member name="M:Terrarium.Game.WorldState.FillCells(OrganismBase.OrganismState,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
             Fills in the appropriate grid cells in our CellIndex given the organism state.
            </summary>
            <param name="state">The state of the organism being added.</param>
            <param name="cellX">The location of the organism in cells.</param>
            <param name="cellY">The location of the organism in cells.</param>
            <param name="cellRadius">The radius in cells of the organism.</param>
            <param name="clear">Determines if cells should be cleared or set.</param>
        </member>
        <member name="M:Terrarium.Game.WorldState.AddOrganism(OrganismBase.OrganismState)">
            <summary>
             Should only be called by the GameEngine.
            </summary>
            <param name="state">The state of the organism to add.</param>
        </member>
        <member name="M:Terrarium.Game.WorldState.RefreshOrganism(OrganismBase.OrganismState)">
            <summary>
             Should only be called by the game engine.  Should be called if the state
             of the organism changes.
            </summary>
            <param name="state">The state of the organism to refresh.</param>
        </member>
        <member name="M:Terrarium.Game.WorldState.RemoveOrganism(System.String)">
            <summary>
             Should only be called by the game engine.  Removes an organism from the world state.
            </summary>
            <param name="organismID">The ID of the organism that needs to be removed.</param>
        </member>
        <member name="M:Terrarium.Game.WorldState.GetOrganismState(System.String)">
            <summary>
             Retrieve the organism state from the world state for the given ID.
            </summary>
            <param name="organismID">The ID to match an organism state.</param>
            <returns>The state of the organism with the given ID.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.MakeImmutable">
            <summary>
             Makes all portions of the world state immutable including
             all organism state objects.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldState.FindOrganisms(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Find organisms with the given rectangular area.
            </summary>
            <param name="x1">Part of the location rectangle.</param>
            <param name="x2">Part of the location rectangle.</param>
            <param name="y1">Part of the location rectangle.</param>
            <param name="y2">Part of the location rectangle.</param>
            <returns>A list of organisms in the given rectangular area.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.GetAvailableLight(OrganismBase.PlantState)">
             <summary>
              Percentage of light reaching this plant.
              We assume the sun moves from east to west directly overhead
            
              We get a rough estimation like this:
              Get all plants with a certain radius whose radius blocks any East-West vector that intersects
              any part of the radius of the plant in question -- assume they block it completely
              Figure out which blocks it at the highest angle.
              Discount the amount of light the plant sees by angle / 180
             </summary>
             <param name="plant">The plant to get light for.</param>
             <returns>The amount of available light for the plant.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.OnlyOverlapsSelf(OrganismBase.OrganismState)">
            <summary>
             Make sure the organism only overlaps itself and not other organisms.
            </summary>
            <param name="state">The state of the organism to check.</param>
            <returns>True if the creature is safe, false otherwise.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.FindOrganismsInCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Finds all organisms within a range of cells.
            </summary>
            <param name="minGridX">Leftmost grid cell</param>
            <param name="maxGridX">Rightmost grid cell</param>
            <param name="minGridY">Topmost grid cell</param>
            <param name="maxGridY">Bottommost grid cell</param>
            <returns>A list of organisms within the cell range.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.FindOrganismsInView(OrganismBase.OrganismState,System.Int32)">
            <summary>
             Find a list of organisms within the view of the given organism.
            </summary>
            <param name="state">The state of the organism to check.</param>
            <param name="radius">The radius of vision.</param>
            <returns>A list of found organisms.</returns>
        </member>
        <member name="M:Terrarium.Game.WorldState.IsGridCellOccupied(System.Int32,System.Int32)">
            <summary>
             Used to determine if a grid cell is occupied.
            </summary>
            <param name="cellX">The cell index.</param>
            <param name="cellY">The cell index.</param>
            <returns>True if the cell is occupied, false otherwise.</returns>
        </member>
        <member name="T:Terrarium.Game.WorldVector">
            <summary>
             The worldvector contains:
             currentState   - State of the world at a point in time
             currentEvents  - The events that represent actions that were finished at this point in time
             currentActions - The actions that were begun by organisms starting at this point in time
                              These may be actions they took based on the events that occurred
             This is called a "Vector" because it represents the current state, and the "direction" it wants to go
             because it contains the actions to apply to it to get to the next state.
            </summary>
        </member>
        <member name="M:Terrarium.Game.WorldVector.#ctor(Terrarium.Game.WorldState)">
            <summary>
             Attach a new state to a world vector.
            </summary>
            <param name="state">The world state used ot init the vector.</param>
        </member>
        <member name="P:Terrarium.Game.WorldVector.Actions">
            <summary>
             Provides access to the rolled up tick actions for the state object.
            </summary>
        </member>
        <member name="P:Terrarium.Game.WorldVector.State">
            <summary>
             Provides access to the current world state.
            </summary>
        </member>
        <member name="T:Terrarium.Renderer.TerrariumSprite">
            <summary>
             An object used by the Graphics Engine to render a creature.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.IsPlant">
            <summary>
             Controls if the rendered object is a plant or animal.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.FrameHeight">
            <summary>
             Returns the frame height of the sprite.  This value isn't really
             required and so is set at a default of 48.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.FrameWidth">
            <summary>
             Returns the frame width of the sprite.  This value isn't really
             required and so is set at a default of 48.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.SkinFamily">
            <summary>
             The skin family for this sprite.  Used to determine which graphics
             to display.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.CurFrame">
            <summary>
             The current frame for this sprite.  Used to animate any animated
             sprites.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.CurFrameDelta">
            <summary>
             The current frame delta for this sprite.  This is used to speed
             up or slow down animations by changing the amount of frames issued
             per AdvanceFrame method called.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.XPosition">
            <summary>
             The current X position within the game world.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.YPosition">
            <summary>
             The current Y position within the game world.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.XDelta">
            <summary>
             The current amount of X to add to the position
             per call to AdvanceFrame.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.YDelta">
            <summary>
             The current amount of Y to add to the position
             per call to AdvanceFrame.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.Selected">
            <summary>
             Determines if the current sprite is selected.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.PreviousAction">
            <summary>
             The current frame type to display.
            </summary>
        </member>
        <member name="P:Terrarium.Renderer.TerrariumSprite.SpriteKey">
            <summary>
             The key used to index sprite sheets.
            </summary>
        </member>
        <member name="M:Terrarium.Renderer.TerrariumSprite.AdvanceFrame">
            <summary>
             Controls movement and frame advancement for the sprite.
            </summary>
        </member>
        <member name="T:Terrarium.Hosting.AppMgr">
            <summary>
            AppMgr is a set of static routines used to set up the Game Scheduler
            that does time slices for creatures as well as the security environment they
            execute in.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.AppMgr.CurrentScheduler">
            <summary>
            only call this from the organism app domain
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.AppMgr.CreateSameDomainScheduler(Terrarium.Game.GameEngine)">
            <summary>
            Creates the scheduler in the same appdomain as the rest of the game
            </summary>
            <param name="engine"></param>
            <returns></returns>
        </member>
        <member name="T:Terrarium.Hosting.GameScheduler">
            <summary>
            This class does all of the work to give the creatures timeslices and ensure 
            that they get killed if they take too much time.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.GameScheduler.MaxAllowance">
            <summary>
            in microseconds, time before component is removed
            default is 10,000,000 (10 secs)
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.getAnimalThreadTime(System.Int64@,System.Int64@)">
            <summary>
            Determines how much actual kernel and user time this thread has actually gotten
            </summary>
            <param name="kernel"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.GetThreadTimes(System.IntPtr,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@,System.Runtime.InteropServices.ComTypes.FILETIME@)">
            <summary>
             Used to get thread times for the current thread.  This enables
             the Hosting code to time out creatures.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.GetCurrentThread">
            <summary>
             Used to get the current thread handle for use with GetThreadTimes
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.GetCurrentProcess">
            <summary>
             Used to get the current process handle for use with DuplicateHandle
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.DuplicateHandle(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.Int32,System.Boolean,System.Int32)">
            <summary>
             Used to duplicate the thread handle returned from GetCurrentThread
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.GameScheduler.CloseHandle(System.IntPtr)">
            <summary>
             Used to close all handles allocated by GetCurrentThread, GetCurrentProcess,
             and DuplicateHandle
            </summary>
        </member>
        <member name="T:Terrarium.Hosting.IGameScheduler">
            <summary>
             Used to define a game scheduler that can be used to host organisms.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.Organisms">
            <summary>
             Provides collection based access to the organisms in the scheduler.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.OrganismsPerTick">
            <summary>
             Returns the number of creatures run per tick.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.TicksPerSec">
            <summary>
             Control the number of ticks per second (which is really the number of buckets
             the animals should be broken into).
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.Quantum">
            <summary>
             Maximum amount of time a creature can run.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.MaxOverage">
            <summary>
             The maximum amount of overtime that can be accrued before
             a creature is penalized.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.MaxAllowance">
            <summary>
             The maximum amount of time that a creature can run before
             it is terminated.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.CurrentState">
            <summary>
             The world state.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.PenalizeForTime">
            <summary>
             Set whether creatures should be penalized for time.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.OrganismAppDomain">
            <summary>
             The AppDomain the organisms are run in.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.CurrentGameEngine">
            <summary>
             Set the current game engine.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.IGameScheduler.SuspendBlacklisting">
            <summary>
             Suspend blacklisting entirely.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.Tick">
            <summary>
             The method that notifies the scheduler to run one set of creatures.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.Add(OrganismBase.Organism,System.String)">
            <summary>
             A method for adding a creature to the scheduler.
            </summary>
            <param name="org">The organism.</param>
            <param name="id">The unique ID of the organism.</param>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.GetOrganism(System.String)">
            <summary>
             A method for retrieving an organism by ID from the scheduler.
            </summary>
            <param name="id">The unique ID of the organism.</param>
            <returns>The organism associated with the ID.</returns>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.SerializeOrganisms(System.IO.Stream)">
            <summary>
             Method for serializing all organisms in the scheduler.
            </summary>
            <param name="stream">The stream to serialize to.</param>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.DeserializeOrganisms(System.IO.Stream)">
            <summary>
             Method for deserializing all organisms in the scheduler.
            </summary>
            <param name="stream">The stream to deserialize.</param>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.CompleteOrganismDeserialization">
            <summary>
             Finalize the deserialization of the organisms.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.Remove(System.String)">
            <summary>
             Used to remove organisms from the scheduler.  Should always
             be called between ticks.
            </summary>
            <param name="organismID">The ID of the organism to remove.</param>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.Create(System.Type,System.String)">
            <summary>
             Create a new organism and add it to the scheduler.
            </summary>
            <param name="species">The type of the species to create.</param>
            <param name="id">The ID for the species.</param>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.GatherTickActions">
            <summary>
             Used to gather all actions that all animals want to perform from the scheduler.
            </summary>
            <returns>The rolled up tick actions.</returns>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.GetOrganismTimingReport(System.String)">
            <summary>
             Get the timing report for an organism.
            </summary>
            <param name="organismID">The ID of the organism.</param>
            <returns>A timing report for the organism.</returns>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.TemporarilySuspendBlacklisting">
            <summary>
             Suspend blacklisting and penalizing temporarily.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.IGameScheduler.Close">
            <summary>
             Close down the game scheduler releasing any resources.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.OrganismWrapper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable constructor
            </summary>
            <param name="info"></param>
            <param name="c"></param>
        </member>
        <member name="P:Terrarium.Hosting.OrganismWrapper.Overage">
            <summary>
            ticks: 100 nanosec intervals
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.OrganismWrapper.TotalTime">
            <summary>
            ticks: 100 nanosec intervals
            </summary>
        </member>
        <member name="T:Terrarium.Hosting.SecurityUtils">
            <summary>
             Encapsulates a series of functions that can be used to
             query and modify security.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.SecurityUtils.SecurityEnabled">
            <summary>
             Determines if security is enabled on the machine.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.SecurityUtils.VerificationDisabled">
            <summary>
             Determine if verification has been disabled.
            </summary>
        </member>
        <member name="P:Terrarium.Hosting.SecurityUtils.IsDebuggerAttached">
            <summary>
             Find out if a managed debugger is attached.
            </summary>
        </member>
        <member name="M:Terrarium.Hosting.SecurityUtils.AssemblyHasTerrariumKey(System.Reflection.AssemblyName)">
            <summary>
             Determine if the given assembly has a terrarium key.
            </summary>
            <param name="asmName">The assembly to check.</param>
            <returns>True if the assembly has the Terrarium key, false otherwise.</returns>
        </member>
        <member name="T:Terrarium.Hosting.StrongNameVerificationState">
            <summary>
            Determines if this machine has shut off strong name verification in some way.  
            If they have we don't want the user to run, because they could get hacked by 
            a malicious animal.
            </summary>
        </member>
        <member name="T:Terrarium.Hosting.TerrariumOrganism">
            <summary>
            Test animal whose sole purpose is to throw an exception.
            We use it when we are deserializing organisms and find one that won't load
            instead of aborting deserialization, we just use this organism so we can continue.
            </summary>
        </member>
        <member name="T:Terrarium.PeerToPeer.NetworkEngine">
            <summary>
             The NetworkEngine which encapsulates all of the peer to peer functionality
             of the Terrarium application.
            </summary>
        </member>
        <member name="F:Terrarium.PeerToPeer.NetworkEngine.NetworkBehindNatMessage">
            <summary>
             Message to show if the user is detected to be behind a NAT
            </summary>
        </member>
        <member name="F:Terrarium.PeerToPeer.NetworkEngine.announceThread">
            <summary>
             The thread used by the network engine in order to announce this peers presence asynchronously.
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.PeerManager">
            <summary>
             Returns the PeerManager that tracks which peers are valid
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.NetworkStatusMessage">
            <summary>
            Returns messages that should be propagated from deep in the networking classes to the UI
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.Teleportations">
            <summary>
            The total number of teleportations
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.LocalTeleportations">
            <summary>
            Number of local teleportations
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.RemoteTeleportations">
            <summary>
            Number of remote teleportations
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.FailedTeleportationReceives">
            <summary>
            Number of failures receiving a creature
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.NetworkEngine.FailedTeleportationSends">
            <summary>
            Number of failures sending a creature
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.StartHttpNamespaceManager">
            <summary>
             Start the HTTP Listener used for Peer to Peer interaction.
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.StopHttpNamespaceManager">
            <summary>
             Stop the HTTP Listener used for Peer to Peer interaction.
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.BeforeProcessRequest(System.Object,System.EventArgs)">
            <summary>
             Called when the HTTP listener starts to process a request
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.AfterProcessRequest(System.Object,System.EventArgs)">
            <summary>
             Called when the HTTP listener is done processing a request
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.ValidatePeer(System.String)">
            <summary>
            Figure out if our local DNS thinks the passed in ipAddress is
            valid for us.
            </summary>
            <param name="ipAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.GetValueFromContent(System.String,System.String,System.String)">
            <summary>
            Simple way to parse an XML tag for content.  Doesn't confirm that the file is valid XML
            </summary>
            <param name="startTag">The start tag</param>
            <param name="endTag">The end tag</param>
            <param name="content">The content to be parsed.</param>
            <returns>The value between the start and end tag.</returns>
        </member>
        <member name="M:Terrarium.PeerToPeer.NetworkEngine.GetValuesFromContent(System.String,System.String,System.String)">
            <summary>
             Retrieves a collection of values delimited by tags from content. Doesn't confirm that the file is valid XML.
            </summary>
            <param name="startTag">The start tag.</param>
            <param name="endTag">The end tag.</param>
            <param name="content">The content to parse.</param>
            <returns>A collection of values parsed from the content.</returns>
        </member>
        <member name="T:Terrarium.PeerToPeer.OrganismsNamespaceHandler">
            <summary>
             Handles querying for organisms, transfering organism assemblies
             and transferring of organism states.  Since the teleport process
             is a multi-part conversation, this handler implements all of the
             parts that interact with the organism data.
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.OrganismsNamespaceHandler.ProcessRequest(Terrarium.Net.HttpApplication)">
            <summary>
             Processes the HTTP Request.  This handler is capable of
             processing several different messages and a series of
             conditional logic is used to determine which message
             is being invoked.
            </summary>
            <param name="webapp">The web application object for the request.</param>
        </member>
        <member name="T:Terrarium.PeerToPeer.Peer">
            <summary>
             Represents information about a peer.  Currently this
             information is used to control peer leasing and
             throttling.
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.Peer.#ctor(System.String,System.DateTime)">
            <summary>
             Initialize a new peer using an IP Address and the timeout
             date on the lease.  This peer object is then stored in
             either the known peers or bad peers collections of the PeerManager.
            </summary>
            <param name="ipAddress">The IP address of this peer.</param>
            <param name="leaseTimeout">The timeout date on the peer's lease.</param>
        </member>
        <member name="P:Terrarium.PeerToPeer.Peer.IPAddress">
            <summary>
             Retrieves the read-only IP Address for this peer.  No
             dynamically morphing a peer to work on another IP.  Each
             IP is considered a distinct and new peer.
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.Peer.LeaseTimeout">
            <summary>
             The timeout on the peer's lease.  This can be used to
             remove the peer from peer collections, move them
             between peer collections, and to determine if the
             peer is valid for a peer connection.
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.Peer.LastReceipt">
            <summary>
             Whenever a conversation completes this property is
             used in order to store the time.  Other code can
             check this property to determine if the current
             conversation from the peer should be accepted.  If
             the last receipt wasn't long enough ago, the peer
             can abort the conversation.  This has no effect on
             either peer except that the conversation doesn't
             complete.
             This is used to make sure people don't cheat by 
             spamming peers with a custom Terrarium client
            </summary>
        </member>
        <member name="T:Terrarium.PeerToPeer.PeerManager">
            <summary>
            Manages the list of peers that this Terrarium knows about.  Each
            Terrarium only knows about a small set of peers and the server
            sets this up to make sure it is a fully connected graph through
            the whole ecosystem.  This is to prevent any machine from knowing
            about too many active internet IP addresses for security reasons.
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.PeerManager.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Terrarium.PeerToPeer.PeerManager.KnownPeers">
            <summary>
            The set of peers this client knows about and considers valid and active
            </summary>
        </member>
        <member name="M:Terrarium.PeerToPeer.PeerManager.ClearBadPeers">
            <summary>
            Empty the collection of peers that had issues for some reason.
            </summary>
        </member>
        <member name="T:Terrarium.PeerToPeer.TeleportWorkItem">
            <summary>
            This is the class that does all the work for asynchronously teleporting an 
            organism from this Terrarium to another.
            
            WARNING: Everything on this class is accessed on a worker thread.  Make sure 
            every method it calls is threadsafe!
            </summary>
        </member>
        <member name="T:Terrarium.PeerToPeer.VersionNamespaceHandler">
            <summary>
             The version namespace handler implements the version namespace for the
             GET method.  During the GET method an XML document is
             returned with the version information.  Use of any other Method is an
             error that is returned and the state of the response is given an error status
             code.
            </summary>
        </member>
    </members>
</doc>
